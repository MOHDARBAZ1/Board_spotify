{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","handleTermChange","bind","search","state","term","e","this","setState","target","value","onSearch","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","console","log","onNameChange","defaultValue","playlistName","playlistTracks","onSave","Spotify","getAccessToken","path","window","location","href","tokenMatch","match","expiresMatch","expiresIn","Number","setTimeout","history","pushState","accessURL","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackURIs","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","currentPlaylist","find","savedTrack","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dbff7729.chunk.js","sourcesContent":["// import API_KEYS from '../keys'\nconst CLIENT_ID = '0dd238469cbe41fa90edca4803d151a1';\nconst REDIRECT_URI = 'http://localhost:8888/callback';\nlet accessToken;\nconst Spotify = {\n    getAccessToken() {\n        if(accessToken) {\n            return accessToken;\n        }\n\n        //check for accessToken match if it hasn't been set\n        const path = window.location.href\n        const tokenMatch = path.match(/access_token=([^&]*)/);\n        const expiresMatch = path.match(/expires_in=([^&]*)/);\n\n        if(tokenMatch && expiresMatch) {\n            accessToken = tokenMatch[1];\n            const expiresIn = Number(expiresMatch[1]);\n            //clear token in order to grab new token when current expires\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            const accessURL = `https://accounts.spotify.com/authorize?client_id=${CLIENT_ID}&response_type=token&scope=playlist-modify-public&redirect_uri=${REDIRECT_URI}`;\n            window.location = accessURL;\n        }\n    },\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        })\n            .then(response => response.json())\n            .then(jsonResponse => {\n                if(!jsonResponse.tracks) {\n                    return [];\n                } else {\n                    return jsonResponse.tracks.items.map(track => ({\n                       id: track.id,\n                       name: track.name,\n                       artist: track.artists[0].name,\n                       album: track.album.name,\n                       uri: track.uri\n                    }));\n                }\n            })\n    },\n    savePlaylist(name, trackURIs) {\n        if(!name || !trackURIs.length) {\n            return;\n        } else {\n            const accessToken = Spotify.getAccessToken();\n            const headers = { Authorization: `Bearer ${accessToken}` };\n            let userId;\n\n            return fetch(`https://api.spotify.com/v1/me`, { headers: headers })\n                .then(response => response.json())\n                .then(jsonResponse => {\n                    userId = jsonResponse.id;\n                    return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n                        headers: headers,\n                        method: 'POST',\n                        body: JSON.stringify({ name: name })\n                    })\n                        .then(response => response.json())\n                        .then(jsonResponse => {\n                            const playlistId = jsonResponse.id;\n                            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                                headers: headers,\n                                method: 'POST',\n                                body: JSON.stringify({ uris: trackURIs})\n                            })\n                        });\n                });\n        }\n    }\n};\n\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.search = this.search.bind(this);\n        this.state = {\n            term: ''\n        }\n    }\n\n    handleTermChange(e) {\n        this.setState({ term: e.target.value });\n    }\n\n    search() {\n        this.props.onSearch(this.state.term)\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\"/>\n                <button onClick={this.search} className=\"SearchButton\">SEARCH</button>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n\n    //this modifies app.state.playlistTracks\n    addTrack(e) {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack(e) {\n        this.props.onRemove(this.props.track);\n    }\n\n    renderAction() {\n        return this.props.isRemoval ? <button onClick={this.removeTrack} className={\"Track-action\"}>-</button> : <button onClick={this.addTrack} className={\"Track-action\"}>+</button>;\n    }\n\n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                {this.renderAction()}\n            </div>\n        );\n    }\n}\n\nexport default Track;","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n\n    render() {\n        return (\n            <div className=\"TrackList\">\n                {this.props.tracks.map(track => {\n                    return <Track\n                        isRemoval={this.props.isRemoval}\n                        onRemove={this.props.onRemove}\n                        onAdd={this.props.onAdd}\n                        track={track}\n                        key={track.id} />\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nexport default TrackList;","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList onAdd={this.props.onAdd} tracks={this.props.searchResults} />\n            </div>\n        );\n    }\n}\n\nexport default SearchResults;","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleNameChange(e) {\n        console.log(e.target.value);\n        this.props.onNameChange(e.target.value);\n    }\n\n    render() {\n      return (\n          <div className=\"Playlist\">\n              <input onChange={this.handleNameChange} defaultValue={this.props.playlistName}/>\n              <TrackList isRemoval={true} onRemove={this.props.onRemove} tracks={this.props.playlistTracks} />\n              <button onClick={this.props.onSave} className=\"Playlist-save\">SAVE TO SPOTIFY</button>\n          </div>\n      );\n    }\n}\n\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n      super(props);\n      this.addTrack = this.addTrack.bind(this);\n      this.removeTrack = this.removeTrack.bind(this);\n      this.savePlaylist = this.savePlaylist.bind(this);\n      this.search = this.search.bind(this);\n      this.updatePlaylistName = this.updatePlaylistName.bind(this);\n      this.state = {\n          searchResults: [],\n          playlistName: 'New Playlist',\n          playlistTracks: []\n      }\n  }\n\n  addTrack(track) {\n      //check to see if the track is in playlist by track.id\n      let currentPlaylist = this.state.playlistTracks;\n      if (currentPlaylist.find(savedTrack => savedTrack.id === track.id)) {\n          return;\n      }\n      currentPlaylist.push(track);\n      this.setState({ playlistTracks: currentPlaylist  })\n  }\n\n  removeTrack(track) {\n      let currentPlaylist = this.state.playlistTracks;\n      currentPlaylist = currentPlaylist.filter(currentTrack => currentTrack.id !== track.id);\n      this.setState({ playlistTracks: currentPlaylist });\n  }\n\n  savePlaylist() {\n      const trackURIs = this.state.playlistTracks.map(track => track.uri);\n      Spotify.savePlaylist(this.state.playlistName, trackURIs)\n          .then(() => {\n              this.setState({\n                  playlistName: 'New Playlist',\n                  playlistTracks: []\n              });\n          });\n  }\n\n  search(term) {\n     Spotify.search(term)\n         .then(searchResults => this.setState({ searchResults: searchResults }));\n  }\n\n  updatePlaylistName(name) {\n      this.setState({ playlistName: name });\n  }\n\n  render() {\n    return (\n        <div>\n          <h1>My<span className=\"highlight\">Jamz</span></h1>\n          <div className=\"App\">\n            <SearchBar onSearch={this.search} />\n            <div className=\"App-playlist\">\n              <SearchResults onAdd={this.addTrack} searchResults={this.state.searchResults} />\n              <Playlist onSave={this.savePlaylist} onNameChange={this.updatePlaylistName} onRemove={this.removeTrack} playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks} />\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport Spotify from \"./util/Spotify\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nSpotify.getAccessToken();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}